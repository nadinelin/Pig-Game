# Assignment One
# Ruby - Game of Pig
# Written by: Nadine Lin (20829106)

class Game
    # Instance variables
    attr_accessor :name, :target_score, :selection, :human_score, :computer_score

    # Method generates a number from 1 - 6 when called
    def roll_dice
        dice = rand(6) + 1
    end

    # Method generates a number between 10 - 30 when called
    def n_generator
        number = rand(10..30)
    end

    # Initial setup for the game with instructions and prompts the user to name and ideal score
    def game_setup
        @human_score= 0
        @computer_score= 0

        # Instructions
        puts "Welcome to the game of pig", ""
        puts "This program allows you to play the Game of Pig against the computer.", ""

        # Ask for user name and stores the name in an instance variable 
        print "What is your name? "

        @name= gets.chomp # store user input into the instance variable

        print "\nThe game has two players and uses one six sided die. \nWhen it is your turn, you have two choices: roll or hold. \nIf you roll and get 2-6 your \'turn total\' increases by the \namount on the die. But, if you roll a 1, your turn's score is zero, \nand it becomes the computer\'s turn. \nIf you hold, your turn total is added to your total score, \nand it becomes the computer\'s turn. \n"

        # Ask for the end score and stores the score in an instance variable
        puts "","Traditionally, the first player to reach 100 wins", ""
        puts "At what score do you want to play to? "
        @target_score= gets.chomp # stores user input into the instance variable


        puts "Okay, we'll play to #{target_score}.", ""
        puts "We'll let you go first.",""
        puts "Okay #{name}, let's play!", ""
    end
    
    # Handels the human turn of the game
    def human_turn
        term_score = 0 # Variable used to store the term score

        puts "Type r to roll, or h to hold. "

        selection= gets.chomp
        select = selection

        dice = 0
        
        # prompts the user for input until they enter "h" or their rolled a dice to 1 which puts their turn on hold
        until selection == "h" || dice.to_i == 1
            
            # Conditional statement to check if user input is valid
            if selection != "r"
                # if not a valid input then prompts the user to type again
                puts  "input can only be r or h"
                selection= gets.chomp

            else selection == "r"
                # if it is a valid input then roll the dice
                dice = roll_dice # calls the roll_dice method
                
                # Conditional statement to check if the dice value is 1
                if dice.to_i == 1
                    # if value is one output and change term score to zero
                    puts "#{name} hi rolled a #{dice.to_s}."
                    term_score = 0
                    human_score = 0
                    puts "#{name} hi turn total is #{term_score.to_s}"
                else
                    # if value is not one output and add up the term score
                    puts "#{name} rolled a #{dice.to_s}."
                    term_score += dice
                    puts "#{name} turn total is #{term_score.to_s}"
    
                    # prompts the user to input selection again
                    puts "Type r to roll, or h to hold. "
                    selection= gets.chomp
                    
                end
                
            end        
           
        end
        
        # stores the term score in to the instance variable human score
        @human_score = term_score + @human_score
       
    end

    # Handels the computer turn of the game
    def computer_turn
        term_score = 0 # Variable used to store the term score

        number = n_generator # calls the number generator method

        dice = 0

        # Loop will run until the number generated by the number generator is less than the term score or dice is a value of 1
        until term_score > number || dice.to_i == 1
            
            dice = roll_dice # calls the roll dice method
        
            # Conditional statement to check if the dice value is 1
            if dice.to_i == 1
                # If value is one output and change term score to 0
                puts "computer hi rolled a #{dice.to_s}."
                term_score = 0
                computer_score = 0
                puts "computer hi turn total is #{term_score.to_s}"
          
            else
                # If dice value is not 1 than add up the term score and output
                puts "computer rolled a #{dice.to_s}."
                term_score += dice
                puts "computer turn total is #{term_score.to_s}"
                
            end   
            
        end

        # stores the term score in the instance variable computer_score
        @computer_score = term_score + @computer_score

    end

    # Handels the over game 
    def gameplay
        
        game_setup # Calls the game_setup method
        human = true # declare a boolean variable
        
        # whan human score and computer score are both less than the target score given by the user than enter the loop
        while human_score.to_i < target_score.to_i && computer_score.to_i < target_score.to_i
            
            # Conditional statment to check if it's human or computer's turn
            if human == true
                # Human's turn
                puts "It is now #{name}\'s turn", ""
                puts "Whoever gets to #{target_score} wins"         
                human_turn # Calls the human turn method           
                human = false # After human turn ends set the human turn boolean value to false           
            else 
                # Computer's turn
                puts "It is now the computer\'s turn \n"
                puts "Whoever gets to #{target_score} wins"
                computer_turn # Calls the computer turn method 
                human = true # Set human boolean value to true 
            end

            # Output score
            puts "Current Scores: "
            puts "\t#{name}: #{human_score}"
            puts "\tComputer: #{computer_score}"
        end

        # Announce Winner
        puts "We have a winner"
        
    end

end

# Declare object and call gameplay method to play the game
game = Game.new
game.gameplay